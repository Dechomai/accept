import './SingUpFrom.scss';

import React from 'react';
import {filter} from 'ramda';
import {withFormik} from 'formik';
import {validateField} from '../../services/validationService';

const InnerForm = ({
  values,
  errors,
  touched,
  isValid,
  handleChange,
  handleBlur,
  handleSubmit,
  isSubmitting
}) => (
  <form onSubmit={handleSubmit} className="sign-up__form">
    <div className="upload-photo" />
    <h5 className="sign-up__form__title">Personal info</h5>
    <p className="sign-up__form__description">
      This information is private and will not be visible to other users
    </p>
    <div className="sign-up__form__name">
      <div className="form-group">
        <label>First name</label>
        <input
          className="form-control"
          type="text"
          name="firstName"
          onChange={handleChange}
          onBlur={handleBlur}
          value={values.firstName}
        />
        {touched.firstName &&
          errors.firstName && <div className="invalid-feedback">{errors.firstName}</div>}
      </div>
      <div className="form-group">
        <label>Last name</label>
        <input
          className="form-control"
          type="text"
          name="lastName"
          onChange={handleChange}
          onBlur={handleBlur}
          value={values.lastName}
        />
        {touched.lastName &&
          errors.lastName && <div className="invalid-feedback">{errors.lastName}</div>}
      </div>
    </div>
    <div className="form-group">
      <label>Phone number</label>
      <small className="form-text text-muted">Enter your number</small>
      <input
        className="form-control"
        type="text"
        name="phone"
        onChange={handleChange}
        onBlur={handleBlur}
        value={values.phone}
      />
      {touched.phone && errors.phone && <div className="invalid-feedback">{errors.phone}</div>}
    </div>
    <div className="form-group">
      <label>Address</label>
      <small className="form-text text-muted">
        Enter a postcode or address line. Only information about your city will be visible to other
        users
      </small>
      <input
        className="form-control"
        type="text"
        name="address"
        onChange={handleChange}
        onBlur={handleBlur}
        value={values.address}
      />
      {touched.address &&
        errors.address && <div className="invalid-feedback">{errors.address}</div>}
    </div>
    <h5 className="sign-up__form__title">Public info</h5>
    <p className="sign-up__form__description">
      Your username is generated by the system. You can change it, this information will be visible
      to other users
    </p>
    <div className="form-group">
      <label>Username</label>
      <input
        className="form-control"
        type="text"
        name="username"
        onChange={handleChange}
        onBlur={handleBlur}
        value={values.username}
      />
      {touched.username &&
        errors.username && <div className="invalid-feedback">{errors.username}</div>}
    </div>
    <div className="sign-up__footer">
      <button type="submit" className="btn btn-primary" disabled={isSubmitting || !isValid}>
        Create profile
      </button>
    </div>
  </form>
);

const SignUpForm = withFormik({
  mapPropsToValues: () => ({
    firstName: '',
    lastName: '',
    phone: '',
    address: '',
    username: ''
  }),
  validate: values => {
    const errors = {};
    const {firstName, lastName, phone, address, username} = values;

    errors.firstName = validateField(firstName, 'name');
    errors.lastName = validateField(lastName, 'name');
    errors.phone = validateField(phone, 'phoneNumber');
    errors.address = validateField(address, 'address');
    errors.username = validateField(username, 'username');

    return filter(n => n, errors);
  },
  handleSubmit: (values, {props, setSubmitting}) => {
    const {createProfile} = props;
    createProfile(values).then(() => {
      console.log('Profile created');
      setSubmitting(false);
    });
  }
})(InnerForm);

export default SignUpForm;
